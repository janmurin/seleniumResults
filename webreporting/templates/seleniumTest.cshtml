@using SeleniumResults.Models
@model SeleniumResults.webreporting.ViewModels.SeleniumTestViewModel

@{
    Layout = "_TestPageLayout.cshtml";
}

<h1 class="h3 mb-2 text-gray-800">@Model.TestStats.Name</h1>

<div class="row">
    <div class="col-xl-12">
        <div class="card shadow mb-4">
            <div class="card-header py-3">
                <h6 class="m-0 font-weight-bold text-primary">Failure Rate</h6>
            </div>
            <div class="card-body">
                <div class="chart-area">
                    <canvas id="myAreaChart"></canvas>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row">
<div class="col-xl-12">
<div class="card shadow mb-4">
    <a href="#testRunsCard" class="d-block card-header py-3 collapsed" data-toggle="collapse" role="button" aria-expanded="false" aria-controls="testRunsCard">
        <h6 class="m-0 font-weight-bold text-primary">Test runs</h6>
    </a>
    <div class="collapse show" id="testRunsCard">
        <div class="card-body">
            <div class="alert alert-warning" role="alert">
                The list does not contain results from test runs with too many errors (> @SeleniumResults.Constants.FAILURE_THRESHOLD). See <a href="../seleniumRuns.html">selenium test runs</a> for more detail.
            </div>
            <div class="table-responsive bg-white">
                <table class="table table-bordered" id="seleniumTestDatatable" width="100%" cellspacing="0">
                    <thead>
                    <tr>
                        <th>Time</th>
                        <th>File</th>
                        <th>Application</th>
                        <th>Sel1/Sel2</th>
                        <th>Result</th>
                        <th>BuildNumber</th>
                        <th>Failure Rate Last 10 builds</th>
                    </tr>
                    </thead>
                    <tfoot>
                    <tr>
                        <th>Time</th>
                        <th>File</th>
                        <th>Application</th>
                        <th>Sel1/Sel2</th>
                        <th>Result</th>
                        <th>BuildNumber</th>
                        <th>Failure Rate Last 10 builds</th>
                    </tr>
                    </tfoot>
                    <tbody>
                    @foreach (var sr in Model.TestStats.Results)
                    {
                        <tr>
                            <td>@sr.Time</td>
                            <td>
                                <a href="../data/@sr.TestRunMetaData.OriginalFileName" target="_blank">@sr.TestRunMetaData.OriginalFileName</a>
                            </td>
                            <td>@sr.TestRunMetaData.FlytApplicationType</td>
                            <td>
                                @if (sr.IsSel1)
                                {
                                    <span class="badge badge-light">Selenium 1</span>
                                }
                                @if (sr.IsSel2)
                                {
                                    <span class="badge badge-info">Selenium 2</span>
                                }
                            </td>
                            <td>
                                @if (sr.IsPassed)
                                {
                                    <span class="badge badge-success">Passed</span>
                                }
                                else
                                {
                                    <span class="badge badge-danger">Failed</span>
                                }
                                @sr.GetDurationMinutes
                            </td>
                            <td>@sr.TestRunMetaData.BuildNumber</td>
                            @{
                                LastXBuildsStat lastXBuildsStat = Model.GetLastXBuildDataByTestResult(sr, false);
                            }
                            <td data-order="@lastXBuildsStat.FailureRate">
                                @lastXBuildsStat.FailureRate % @sr.TestRunMetaData.FlytApplicationType
                                <a class="" href="#" data-toggle="modal" data-target="#lastXBuildsModal_@(sr.TestRunMetaData.FlytApplicationType)_@sr.TestRunMetaData.BuildNumber">Detail</a>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
@* generate modals *@
@foreach (var sr in Model.TestStats.Results)
{
    LastXBuildsStat lastXBuildsStat = Model.GetLastXBuildDataByTestResult(sr, true);
    if (lastXBuildsStat != null)
    {
        <div class="modal fade" id="lastXBuildsModal_@(sr.TestRunMetaData.FlytApplicationType)_@sr.TestRunMetaData.BuildNumber" tabindex="-1" role="dialog" aria-labelledby="exampleModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-xl" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@sr.Name last 10 builds for @sr.TestRunMetaData.BuildNumber</h5>
                        <button class="close" type="button" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">Ã—</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <table class="table table-borderless table-sm w-auto">
                            <tbody>
                            <tr>
                                <th scope="row">Failure rate:</th>
                                <td>@lastXBuildsStat.FailureRate %</td>
                            </tr>
                            <tr>
                                <th scope="row">Total builds:</th>
                                <td>@lastXBuildsStat.TotalFailed/@lastXBuildsStat.TotalBuilds</td>
                            </tr>
                            </tbody>
                        </table>
                        <table class="table table-bordered modal-datatable" width="100%" cellspacing="0">
                            <thead>
                            <tr>
                                <th>Time</th>
                                <th>File</th>
                                <th>Application</th>
                                <th>Result</th>
                                <th>BuildNumber</th>
                            </tr>
                            </thead>
                            <tfoot>
                            <tr>
                                <th>Time</th>
                                <th>File</th>
                                <th>Application</th>
                                <th>Result</th>
                                <th>BuildNumber</th>
                            </tr>
                            </tfoot>
                            <tbody>
                            @foreach (var str in lastXBuildsStat.GetOrderedTestRuns())
                            {
                                <tr>
                                    <td>@str.Time</td>
                                    <td>
                                        <a href="../data/@str.TestRunMetaData.OriginalFileName" target="_blank">@str.TestRunMetaData.OriginalFileName</a>
                                    </td>
                                    <td>@str.TestRunMetaData.FlytApplicationType</td>
                                    <td>
                                        <span class="badge @(str.IsPassed ? "badge-success" : "badge-danger")">@str.TestResultType</span>
                                    </td>
                                    <td>@str.TestRunMetaData.BuildNumber</td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button class="btn btn-secondary" type="button" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }
}

<div class="card shadow mb-4">
    <a href="#testFailureMessagesCard" class="d-block card-header py-3" data-toggle="collapse" role="button" aria-expanded="true" aria-controls="testFailureMessagesCard">
        <h6 class="m-0 font-weight-bold text-primary">Test failure messages</h6>
    </a>
    <div class="collapse show" id="testFailureMessagesCard">
        <div class="card-body">
            <div class="table-responsive bg-white">
                <table class="table table-bordered" id="testFailuresDatatable" width="100%" cellspacing="0">
                    <thead>
                    <tr>
                        <th>Build data</th>
                        <th>Result</th>
                        <th>SubTest Name</th>
                        <th>Message</th>
                    </tr>
                    </thead>
                    <tfoot>
                    <tr>
                        <th>Build data</th>
                        <th>Result</th>
                        <th>SubTest Name</th>
                        <th>Message</th>
                    </tr>
                    </tfoot>
                    <tbody>
                    @foreach (var sr in Model.TestStats.Results)
                    {
                        @foreach (var subTest in sr.SubTests)
                        {
                            <tr>
                                <td data-order="@sr.Time">
                                    @sr.TestRunMetaData.FlytApplicationType<br/>
                                    @sr.Time<br/>
                                    <strong>@sr.TestRunMetaData.BuildNumber</strong><br/>
                                    @if (sr.IsSel1)
                                    {
                                        <span class="badge badge-light">Selenium 1</span>
                                    }
                                    @if (sr.IsSel2)
                                    {
                                        <span class="badge badge-info">Selenium 2</span>
                                    }
                                    <br/>
                                    <a href="../data/@sr.TestRunMetaData.OriginalFileName" target="_blank">@sr.TestRunMetaData.OriginalFileName</a>
                                </td>
                                <td>
                                    @if (subTest.IsPassed)
                                    {
                                        <span class="badge badge-success">Passed</span>
                                    }
                                    @if (subTest.IsFailed)
                                    {
                                        <span class="badge badge-danger">Failed</span>
                                    }
                                    @if (subTest.IsSkipped)
                                    {
                                        <span class="badge badge-warning">Skipped</span>
                                    }
                                    @sr.GetDurationMinutes
                                </td>
                                <td>@subTest.Name</td>
                                <td style="font-size: small;">@subTest.Message</td>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>
</div>
</div>

@section scripts {
    <script>
    $(document).ready(function () {
        $('#seleniumTestDatatable').DataTable({
            "order": [[0, "desc"]],
            "pageLength": 10
        });
            
        $('#testFailuresDatatable thead tr').clone(true).appendTo( '#testFailuresDatatable thead' );
            $('#testFailuresDatatable thead tr:eq(1) th').each( function (i) {
                var title = $(this).text();
                $(this).html( '<input type="text" placeholder="Search '+title+'" />' );
         
                $( 'input', this ).on( 'keyup change', function () {
                    if ( table.column(i).search() !== this.value ) {
                        table
                            .column(i)
                            .search( this.value )
                            .draw();
                    }
                } );
            } );
         
            var table = $('#testFailuresDatatable').DataTable( {
                orderCellsTop: true,
                fixedHeader: true,
                "order": [[0, "desc"]]
            } );
    });
    $('.modal').on('shown.bs.modal', function (e) {
        var id = "#"+e.currentTarget.id + " .modal-datatable";
                
        if (!$.fn.DataTable.isDataTable(id)) {
            $(id).DataTable({
                "order": [[0, "desc"]]
            });
        }
    });
            
    Chart.defaults.global.defaultFontFamily = 'Nunito', '-apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif';
    Chart.defaults.global.defaultFontColor = '#858796';
    var timeFormat = 'YYYY-MM-DD HH:mm:ss';

    function newDate(days) {
        return moment().add(days, 'd').toDate();
    }

    function newDateString(days) {
        return moment().add(days, 'd').format(timeFormat);
    }
    function number_format(number, decimals, dec_point, thousands_sep) {
      // *     example: number_format(1234.56, 2, ',', ' ');
      // *     return: '1 234,56'
      number = (number + '').replace(',', '').replace(' ', '');
      var n = !isFinite(+number) ? 0 : +number,
        prec = !isFinite(+decimals) ? 0 : Math.abs(decimals),
        sep = (typeof thousands_sep === 'undefined') ? ',' : thousands_sep,
        dec = (typeof dec_point === 'undefined') ? '.' : dec_point,
        s = '',
        toFixedFix = function(n, prec) {
          var k = Math.pow(10, prec);
          return '' + Math.round(n * k) / k;
        };
      // Fix for IE parseFloat(0.55).toFixed(0) = 0;
      s = (prec ? toFixedFix(n, prec) : '' + Math.round(n)).split('.');
      if (s[0].length > 3) {
        s[0] = s[0].replace(/\B(?=(?:\d{3})+(?!\d))/g, sep);
      }
      if ((s[1] || '').length < prec) {
        s[1] = s[1] || '';
        s[1] += new Array(prec - s[1].length + 1).join('0');
      }
      return s.join(dec);
    }

    // Area Chart Example
    var ctx = document.getElementById("myAreaChart");
    var myLineChart = new Chart(ctx, {
      type: 'line',
            data: {
              labels: [ // Date Objects
                  newDate(0),
                  newDate(6)
              ],
              datasets: @Raw(Model.DataSetsJson)
            },
      options: {
        maintainAspectRatio: false,
        layout: {
          padding: {
            left: 10,
            right: 25,
            top: 25,
            bottom: 0
          }
        },
        scales: {
          xAxes: [{
              type: 'time',
              time: {
                  parser: timeFormat,
                  // round: 'day'
                  tooltipFormat: 'll HH:mm'
              },
            gridLines: {
              display: false,
              drawBorder: false
            },
          }],
          yAxes: [{
            ticks: {
              maxTicksLimit: 5,
              padding: 10,
              // Include a dollar sign in the ticks
              callback: function(value, index, values) {
                return number_format(value) + "%";
              }
            },
            gridLines: {
              color: "rgb(234, 236, 244)",
              zeroLineColor: "rgb(234, 236, 244)",
              drawBorder: false,
              borderDash: [2],
              zeroLineBorderDash: [2]
            }
          }],
        },
        legend: {
          display: true
        },
        tooltips: {
          backgroundColor: "rgb(255,255,255)",
          bodyFontColor: "#858796",
          titleMarginBottom: 10,
          titleFontColor: '#6e707e',
          titleFontSize: 14,
          borderColor: '#dddfeb',
          borderWidth: 1,
          xPadding: 15,
          yPadding: 15,
          displayColors: false,
          intersect: false,
          mode: 'index',
          caretPadding: 10,
          callbacks: {
            label: function(tooltipItem, chart) {
              var datasetLabel = chart.datasets[tooltipItem.datasetIndex].label || '';
              return datasetLabel + ': ' + number_format(tooltipItem.yLabel) + ' %';
            }
          }
        }
      }
    });
    </script>
}